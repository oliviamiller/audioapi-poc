// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: audio.proto

package audio

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codec         string                 `protobuf:"bytes,1,opt,name=codec,proto3" json:"codec,omitempty"` // pcm16,pcm32,mp3,opus,etc.
	SampleRate    int32                  `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	NumChannels   int32                  `protobuf:"varint,3,opt,name=num_channels,json=numChannels,proto3" json:"num_channels,omitempty"` // number of input/output streams (e.g 2 for stereo speaker: left and right)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioInfo) Reset() {
	*x = AudioInfo{}
	mi := &file_audio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioInfo) ProtoMessage() {}

func (x *AudioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioInfo.ProtoReflect.Descriptor instead.
func (*AudioInfo) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

func (x *AudioInfo) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *AudioInfo) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioInfo) GetNumChannels() int32 {
	if x != nil {
		return x.NumChannels
	}
	return 0
}

type GetAudioRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DurationSeconds    int32                  `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	Codec              string                 `protobuf:"bytes,3,opt,name=codec,proto3" json:"codec,omitempty"`
	RequestId          string                 `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	MaxDurationSeconds float32                `protobuf:"fixed32,5,opt,name=max_duration_seconds,json=maxDurationSeconds,proto3" json:"max_duration_seconds,omitempty"`
	PreviousTimestamp  float32                `protobuf:"fixed32,6,opt,name=previous_timestamp,json=previousTimestamp,proto3" json:"previous_timestamp,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetAudioRequest) Reset() {
	*x = GetAudioRequest{}
	mi := &file_audio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioRequest) ProtoMessage() {}

func (x *GetAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioRequest.ProtoReflect.Descriptor instead.
func (*GetAudioRequest) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{1}
}

func (x *GetAudioRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAudioRequest) GetDurationSeconds() int32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *GetAudioRequest) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *GetAudioRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetAudioRequest) GetMaxDurationSeconds() float32 {
	if x != nil {
		return x.MaxDurationSeconds
	}
	return 0
}

func (x *GetAudioRequest) GetPreviousTimestamp() float32 {
	if x != nil {
		return x.PreviousTimestamp
	}
	return 0
}

type AudioChunk struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	AudioData                 []byte                 `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	Info                      *AudioInfo             `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Sequence                  int32                  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"` // Sequence number
	StartTimestampNanoseconds int64                  `protobuf:"varint,4,opt,name=start_timestamp_nanoseconds,json=startTimestampNanoseconds,proto3" json:"start_timestamp_nanoseconds,omitempty"`
	EndTimestampNanoseconds   int64                  `protobuf:"varint,5,opt,name=end_timestamp_nanoseconds,json=endTimestampNanoseconds,proto3" json:"end_timestamp_nanoseconds,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	mi := &file_audio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{2}
}

func (x *AudioChunk) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

func (x *AudioChunk) GetInfo() *AudioInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *AudioChunk) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AudioChunk) GetStartTimestampNanoseconds() int64 {
	if x != nil {
		return x.StartTimestampNanoseconds
	}
	return 0
}

func (x *AudioChunk) GetEndTimestampNanoseconds() int64 {
	if x != nil {
		return x.EndTimestampNanoseconds
	}
	return 0
}

var File_audio_proto protoreflect.FileDescriptor

const file_audio_proto_rawDesc = "" +
	"\n" +
	"\vaudio.proto\x1a\x1cgoogle/api/annotations.proto\"e\n" +
	"\tAudioInfo\x12\x14\n" +
	"\x05codec\x18\x01 \x01(\tR\x05codec\x12\x1f\n" +
	"\vsample_rate\x18\x02 \x01(\x05R\n" +
	"sampleRate\x12!\n" +
	"\fnum_channels\x18\x03 \x01(\x05R\vnumChannels\"\xe6\x01\n" +
	"\x0fGetAudioRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12)\n" +
	"\x10duration_seconds\x18\x02 \x01(\x05R\x0fdurationSeconds\x12\x14\n" +
	"\x05codec\x18\x03 \x01(\tR\x05codec\x12\x1d\n" +
	"\n" +
	"request_id\x18\x04 \x01(\tR\trequestId\x120\n" +
	"\x14max_duration_seconds\x18\x05 \x01(\x02R\x12maxDurationSeconds\x12-\n" +
	"\x12previous_timestamp\x18\x06 \x01(\x02R\x11previousTimestamp\"\xe3\x01\n" +
	"\n" +
	"AudioChunk\x12\x1d\n" +
	"\n" +
	"audio_data\x18\x01 \x01(\fR\taudioData\x12\x1e\n" +
	"\x04info\x18\x02 \x01(\v2\n" +
	".AudioInfoR\x04info\x12\x1a\n" +
	"\bsequence\x18\x03 \x01(\x05R\bsequence\x12>\n" +
	"\x1bstart_timestamp_nanoseconds\x18\x04 \x01(\x03R\x19startTimestampNanoseconds\x12:\n" +
	"\x19end_timestamp_nanoseconds\x18\x05 \x01(\x03R\x17endTimestampNanoseconds2q\n" +
	"\fAudioService\x12a\n" +
	"\bGetAudio\x12\x10.GetAudioRequest\x1a\v.AudioChunk\"4\x82\xd3\xe4\x93\x02.\",/olivia/api/v1/service/audio/{name}/GetAudio0\x01B\tZ\a./audiob\x06proto3"

var (
	file_audio_proto_rawDescOnce sync.Once
	file_audio_proto_rawDescData []byte
)

func file_audio_proto_rawDescGZIP() []byte {
	file_audio_proto_rawDescOnce.Do(func() {
		file_audio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)))
	})
	return file_audio_proto_rawDescData
}

var file_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_audio_proto_goTypes = []any{
	(*AudioInfo)(nil),       // 0: AudioInfo
	(*GetAudioRequest)(nil), // 1: GetAudioRequest
	(*AudioChunk)(nil),      // 2: AudioChunk
}
var file_audio_proto_depIdxs = []int32{
	0, // 0: AudioChunk.info:type_name -> AudioInfo
	1, // 1: AudioService.GetAudio:input_type -> GetAudioRequest
	2, // 2: AudioService.GetAudio:output_type -> AudioChunk
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_audio_proto_init() }
func file_audio_proto_init() {
	if File_audio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_audio_proto_rawDesc), len(file_audio_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_proto_goTypes,
		DependencyIndexes: file_audio_proto_depIdxs,
		MessageInfos:      file_audio_proto_msgTypes,
	}.Build()
	File_audio_proto = out.File
	file_audio_proto_goTypes = nil
	file_audio_proto_depIdxs = nil
}
